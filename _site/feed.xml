<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-03-23T19:18:38+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Rep(i,n)</title><subtitle>Personal blog</subtitle><author><name>Siddhartha Srivastava</name></author><entry><title type="html">IIT Kanpur on Codeforces</title><link href="http://localhost:4000/personal/IITKonCF.html" rel="alternate" type="text/html" title="IIT Kanpur on Codeforces" /><published>2024-03-22T00:00:00+05:30</published><updated>2024-03-22T00:00:00+05:30</updated><id>http://localhost:4000/personal/IITKonCF</id><content type="html" xml:base="http://localhost:4000/personal/IITKonCF.html"><![CDATA[<p>I was really lucky when it came to competitive programming. I got lucky in that it was an activity that I enjoyed, an activity that I started off slightly better than others because I had Math Olympaid prep and most importantly, was an activity that did not doom my job prospects. I think at IIT Kanpur, it’s really tough choosing what to do because there are a lot of smart people. This makes it becomes hard to determine what activities will actually help you in life, because for any activity you will find a few people that will end up doing really well since the base rate of people from IIT Kanpur doing great things is really high. You could decide to rollerskate and find that there are few seniors who you later find out had a perfect 10 and are going to do a PhD at MIT.</p>

<p>For that reason, and many others, a lot of people end up asking me whether competitive programming was worth it or whether it was just luck that people do well. It’s a hard question for me to answer because I never thought about when I decided to start doing it. It does on average however seem to result in slightly better job outcomes for students who pursue it - but this again was never really explored in a rigorous manner, at some level it may be just blind luck.</p>

<p>This has been on the back of my mind until I noticed this tweet (insert tweet here).</p>

<p>I assumed (incorrectly) that they used the Codeforces API to scrape this information, so I decided to see use it myself how many people from IIT Kanpur ever had a rating above 1900. Running a small script, I found there were roughly 98 people (though there may be a few more since some people did not set their institution as IIT Kanpur or a few less since some people ended up creating alt accounts). 98 people was a lot to analyse, so I decided to look at the people who have had at any point of time had a rating above 2100. This turned out to be roughly 38 people, who I’ve listed below.</p>

<div class="sheetiframe-container">
    <iframe src="https://docs.google.com/spreadsheets/d/e/2PACX-1vRrvBibr6eSwRVV3ntSte_ENA9oYbD7zw8dlRQXNTXD0O6p-KtOc5BqqLN-nBKugQ/pubhtml?gid=1292932476&amp;single=true&amp;widget=true&amp;headers=false" class="sheetiframe"></iframe>
</div>

<p>This is a smaller list to analyse, so I decided to see if there are some interesting statistics. The one interesting thing is that almost everyone is doing great and was or is at a company that comes on day 1 of placements. A majority are from CSE, a few from Math and Electrical and some from Civil which is surprising. A good chunk of people are at either Glean, Rubrik or Google, which are target companies for most of the students involved. A good chunk are still currently students, but seem to have internships at trading firms, so they’re doing really good as well. I think the larger interesting point is that almost everyone who hits 2100 at any point of time does really well. In fact, they do better the CSE cohort. An apples to apples comparison isn’t really possible, but it’s an interesting statistic that there’s a higher probability of a non CSE &gt;2100 rated coder getting into Google than an average CSE student.</p>

<p>It would be unfair to not discuss the few obvious flaws in this discussion.</p>

<ul>
  <li>The data is skewed towards recent graduates - due to rating inflation, it’s easier to hit 2100 now than it was 5 years ago. Codeforces is also relatively new, so lots of older alumnus didn’t use Codeforces. This means that we’re essentially analysing early career data. Only 5-6 people in this list graduated before 2020.</li>
  <li>Competitive programming is essentially “teaching the test” - most companies have tests where you have an advantage if you’ve done competitive programming. This means that it’s relatively easy to break in early on, but it may not be a predictor of future success.</li>
  <li>Lack of PhDs - there is a distinct lack of students who end up for PhD. In the current list, almost no one has gone for a PhD, though as discussed on point 1, it’s still early for a lot of people to know for sure whether they will end up doing a PhD.</li>
</ul>

<p>The relatively small script to pull names.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import requests
import json


# Get the list of all rated users
rated_users_url = "https://codeforces.com/api/user.ratedList?activeOnly=false&amp;includeRetired=true"
rated_users_response = requests.get(rated_users_url)
rated_users_data = json.loads(rated_users_response.text)

rs = rated_users_data["result"]
iitk_users = []
for it in rs:
    if(('organization' in it) and (it['organization'] == 'IIT Kanpur') and (it['maxRating'] &gt;= 2100)):
        iitk_users.append(it)
        print(f"{it.get('firstName', '')}{' ' if it.get('firstName', '') else ''}{it.get('lastName', '')} {it.get('handle', '')}")
</code></pre></div></div>]]></content><author><name>Siddhartha Srivastava</name></author><category term="personal" /><category term="personal" /><summary type="html"><![CDATA[I was really lucky when it came to competitive programming. I got lucky in that it was an activity that I enjoyed, an activity that I started off slightly better than others because I had Math Olympaid prep and most importantly, was an activity that did not doom my job prospects. I think at IIT Kanpur, it’s really tough choosing what to do because there are a lot of smart people. This makes it becomes hard to determine what activities will actually help you in life, because for any activity you will find a few people that will end up doing really well since the base rate of people from IIT Kanpur doing great things is really high. You could decide to rollerskate and find that there are few seniors who you later find out had a perfect 10 and are going to do a PhD at MIT. For that reason, and many others, a lot of people end up asking me whether competitive programming was worth it or whether it was just luck that people do well. It’s a hard question for me to answer because I never thought about when I decided to start doing it. It does on average however seem to result in slightly better job outcomes for students who pursue it - but this again was never really explored in a rigorous manner, at some level it may be just blind luck. This has been on the back of my mind until I noticed this tweet (insert tweet here). I assumed (incorrectly) that they used the Codeforces API to scrape this information, so I decided to see use it myself how many people from IIT Kanpur ever had a rating above 1900. Running a small script, I found there were roughly 98 people (though there may be a few more since some people did not set their institution as IIT Kanpur or a few less since some people ended up creating alt accounts). 98 people was a lot to analyse, so I decided to look at the people who have had at any point of time had a rating above 2100. This turned out to be roughly 38 people, who I’ve listed below. This is a smaller list to analyse, so I decided to see if there are some interesting statistics. The one interesting thing is that almost everyone is doing great and was or is at a company that comes on day 1 of placements. A majority are from CSE, a few from Math and Electrical and some from Civil which is surprising. A good chunk of people are at either Glean, Rubrik or Google, which are target companies for most of the students involved. A good chunk are still currently students, but seem to have internships at trading firms, so they’re doing really good as well. I think the larger interesting point is that almost everyone who hits 2100 at any point of time does really well. In fact, they do better the CSE cohort. An apples to apples comparison isn’t really possible, but it’s an interesting statistic that there’s a higher probability of a non CSE &gt;2100 rated coder getting into Google than an average CSE student. It would be unfair to not discuss the few obvious flaws in this discussion. The data is skewed towards recent graduates - due to rating inflation, it’s easier to hit 2100 now than it was 5 years ago. Codeforces is also relatively new, so lots of older alumnus didn’t use Codeforces. This means that we’re essentially analysing early career data. Only 5-6 people in this list graduated before 2020. Competitive programming is essentially “teaching the test” - most companies have tests where you have an advantage if you’ve done competitive programming. This means that it’s relatively easy to break in early on, but it may not be a predictor of future success. Lack of PhDs - there is a distinct lack of students who end up for PhD. In the current list, almost no one has gone for a PhD, though as discussed on point 1, it’s still early for a lot of people to know for sure whether they will end up doing a PhD.]]></summary></entry><entry><title type="html">Puzzle 2</title><link href="http://localhost:4000/puzzles/Puzzle02.html" rel="alternate" type="text/html" title="Puzzle 2" /><published>2022-08-28T00:00:00+05:30</published><updated>2022-08-28T00:00:00+05:30</updated><id>http://localhost:4000/puzzles/Puzzle02</id><content type="html" xml:base="http://localhost:4000/puzzles/Puzzle02.html"><![CDATA[<p><strong>Problem</strong>: A basketball player has a season free throw average of \(70\%\) halfway through the season, and raises it to \(80\%\) by the end of the season.</p>

<p>Is it necessarily true that it was exactly \(75\%\) at some point? Why or why not? <a href="https://twitter.com/TaterTotient/status/1563246271884042253">Source</a></p>

<p><strong>Extension</strong>: For which integer triples \((a,b,c)\) can a basketball player go from a free throw average of \(a\) to \(c\) while avoiding a free throw average of \(b\).</p>

<p><a href="Solution02.html">Solution</a></p>]]></content><author><name>Siddhartha Srivastava</name></author><category term="puzzles" /><category term="puzzle" /><summary type="html"><![CDATA[Problem: A basketball player has a season free throw average of \(70\%\) halfway through the season, and raises it to \(80\%\) by the end of the season. Is it necessarily true that it was exactly \(75\%\) at some point? Why or why not? Source Extension: For which integer triples \((a,b,c)\) can a basketball player go from a free throw average of \(a\) to \(c\) while avoiding a free throw average of \(b\). Solution]]></summary></entry><entry><title type="html">Solution 2</title><link href="http://localhost:4000/puzzles/Solution02.html" rel="alternate" type="text/html" title="Solution 2" /><published>2022-08-28T00:00:00+05:30</published><updated>2022-08-28T00:00:00+05:30</updated><id>http://localhost:4000/puzzles/Solution02</id><content type="html" xml:base="http://localhost:4000/puzzles/Solution02.html"><![CDATA[<p><strong>Problem</strong>: A basketball player has a season free throw average of \(70\%\) halfway through the season, and raises it to \(80\%\) by the end of the season.
Is it necessarily true that it was exactly \(75\%\) at some point? Why or why not?</p>

<p><strong>Solution</strong>:  Let \((70\%, x_1, \dots, x_n, 80 \%)\) be the free throw averages after every free throw starting from the season’s halfway mark until the end of the season.</p>

<p>Now suppose that at no point in time was the free throw average \(75 \%\). We know that there must exist some \(i\) such that \(x_i &lt; 75\% &lt; x_{i+1}\). Suppose that the number of free throws taken at point \(i\) is \(n_i\) and the number of successful throws taken are \(s_i\). Additionally, as the free throw average increases, we know that the free throw taken after the \(i\)th point must have been successful. Therefore,</p>

\[x_i = \frac{s_i}{n_i} &lt; \frac{3}{4} \text{ and } x_{i+1} = \frac{s_i + 1}{n_i + 1} &gt; \frac{3}{4}\]

\[4s_i &lt; 3n_i \text{ and } 4s_i + 4 &gt; 3n_i + 3\]

\[4s_i &lt; 3n_i \text{ and } 4s_i + 1 &gt; 3n_i\]

<p>This is not possible for natural numbers \(s_i\) and \(n_i\) which leads to a contradiction.</p>

<p>Therefore, the basketball player must always reach a point where their free throw average is \(75\%\).</p>

<p><strong>Extension</strong>: For which integer triples \((a,b,c)\) can a basketball player go from a free throw average of \(a\) to \(c\) while avoiding a free throw average of \(b\).</p>

<p><strong>Solution (Extension)</strong>: First we look at the case where \(a &lt; c\). Looking at the previous proof, we note that all \(b\) such that \(b = n/(n+1)\) for some natural number \(n\) are unavoidable. To prove that they are the only unavoidable numbers, suppose \(b = p/q\) where \(p + 1 \not = q\). Using the same logic previously</p>

\[qs_i &lt; pn_i \text{ and } qs_i + (p-q) &gt; pn_i\]

<p>If we have \(pn_i = qs_i + 1\), we see that both equations are satsified. We know that it is always possible to find \(n_i\) and \(s_i\) such that this equation holds. To see this, note that since \(p\) and \(q\) are co-prime, there exist multiple \(n_i\) such that \(pn_i \equiv 1 \pmod{q}\). Therefore, \(pn_i = qs_i + 1\). Therefore, to avoid \(b\), we note that we can first aim to reach \(n_i\) shots with \(s_i\) successful ones while making sure that all required successful shots happen at the end (to avoid crossing \(b\) before). Then we shoot one successful free throw to get to \((s_i + 1)/(n_i + 1) &gt; b\) after which you can reach \(c\) by frontloading successful shots.</p>]]></content><author><name>Siddhartha Srivastava</name></author><category term="puzzles" /><category term="solution" /><summary type="html"><![CDATA[Problem: A basketball player has a season free throw average of \(70\%\) halfway through the season, and raises it to \(80\%\) by the end of the season. Is it necessarily true that it was exactly \(75\%\) at some point? Why or why not? Solution: Let \((70\%, x_1, \dots, x_n, 80 \%)\) be the free throw averages after every free throw starting from the season’s halfway mark until the end of the season. Now suppose that at no point in time was the free throw average \(75 \%\). We know that there must exist some \(i\) such that \(x_i &lt; 75\% &lt; x_{i+1}\). Suppose that the number of free throws taken at point \(i\) is \(n_i\) and the number of successful throws taken are \(s_i\). Additionally, as the free throw average increases, we know that the free throw taken after the \(i\)th point must have been successful. Therefore, \[x_i = \frac{s_i}{n_i} &lt; \frac{3}{4} \text{ and } x_{i+1} = \frac{s_i + 1}{n_i + 1} &gt; \frac{3}{4}\] \[4s_i &lt; 3n_i \text{ and } 4s_i + 4 &gt; 3n_i + 3\] \[4s_i &lt; 3n_i \text{ and } 4s_i + 1 &gt; 3n_i\] This is not possible for natural numbers \(s_i\) and \(n_i\) which leads to a contradiction. Therefore, the basketball player must always reach a point where their free throw average is \(75\%\). Extension: For which integer triples \((a,b,c)\) can a basketball player go from a free throw average of \(a\) to \(c\) while avoiding a free throw average of \(b\). Solution (Extension): First we look at the case where \(a &lt; c\). Looking at the previous proof, we note that all \(b\) such that \(b = n/(n+1)\) for some natural number \(n\) are unavoidable. To prove that they are the only unavoidable numbers, suppose \(b = p/q\) where \(p + 1 \not = q\). Using the same logic previously \[qs_i &lt; pn_i \text{ and } qs_i + (p-q) &gt; pn_i\] If we have \(pn_i = qs_i + 1\), we see that both equations are satsified. We know that it is always possible to find \(n_i\) and \(s_i\) such that this equation holds. To see this, note that since \(p\) and \(q\) are co-prime, there exist multiple \(n_i\) such that \(pn_i \equiv 1 \pmod{q}\). Therefore, \(pn_i = qs_i + 1\). Therefore, to avoid \(b\), we note that we can first aim to reach \(n_i\) shots with \(s_i\) successful ones while making sure that all required successful shots happen at the end (to avoid crossing \(b\) before). Then we shoot one successful free throw to get to \((s_i + 1)/(n_i + 1) &gt; b\) after which you can reach \(c\) by frontloading successful shots.]]></summary></entry><entry><title type="html">Puzzle 1</title><link href="http://localhost:4000/puzzles/Puzzle01.html" rel="alternate" type="text/html" title="Puzzle 1" /><published>2022-08-21T00:00:00+05:30</published><updated>2022-08-21T00:00:00+05:30</updated><id>http://localhost:4000/puzzles/Puzzle01</id><content type="html" xml:base="http://localhost:4000/puzzles/Puzzle01.html"><![CDATA[<p><strong>Problem</strong>: Suppose you have an \(n \times n\) grid. Show that for any \(2n - 1\) points chosen on the grid, there exist \(3\) points that form a right-angle triangle.</p>

<p><strong>Extension</strong>: Show that \(2n - 2\) points aren’t sufficient to get an (axis-aligned) right-angle triangle. Is it sufficient to get any right-angle triangle (not necessarily axis-aligned)?</p>

<p><a href="Solution01.html" class="solutioncss">Solution</a></p>]]></content><author><name>Siddhartha Srivastava</name></author><category term="puzzles" /><category term="puzzle" /><summary type="html"><![CDATA[Problem: Suppose you have an \(n \times n\) grid. Show that for any \(2n - 1\) points chosen on the grid, there exist \(3\) points that form a right-angle triangle. Extension: Show that \(2n - 2\) points aren’t sufficient to get an (axis-aligned) right-angle triangle. Is it sufficient to get any right-angle triangle (not necessarily axis-aligned)? Solution]]></summary></entry><entry><title type="html">Solution 1</title><link href="http://localhost:4000/puzzles/Solution01.html" rel="alternate" type="text/html" title="Solution 1" /><published>2022-08-21T00:00:00+05:30</published><updated>2022-08-21T00:00:00+05:30</updated><id>http://localhost:4000/puzzles/Solution01</id><content type="html" xml:base="http://localhost:4000/puzzles/Solution01.html"><![CDATA[<p><strong>Problem</strong>: Suppose you have an \(n \times n\) grid. Show that for any \(2n - 1\) points chosen on the grid, there exist \(3\) points that form a right-angle triangle.</p>

<p><strong>Solution</strong>: The standard solution here is to use the pigeon-hole principle.</p>

<p>We note that the existence of an (axis-aligned) right-angle triangle is guaranteed if there exists a point such that there exists one point in the same row (i.e. with the same y-coordinate) and another point in the same column (i.e. with the same x-coordinate).</p>

<p>This motivates us to try to find the number of points that share a row/column with another point. To find the minimum number of points that share a row/column with another point, we find the maximum number of points that don’t share a row/column with another point. This comes out to \(n - 1\) since we can isolate \(n-1\) points in \(n - 1\) row/columns (we can’t do \(n\) since we only have \(n\) rows and given we have \(&gt;n\) points, one row will have more than one point.)</p>

<p>Therefore, the minimum number of points that share a row is \(n\). Likewise, the number of points that share a column is \(n\). Given that we have only \(2n - 1\) points, we see that there must be \(1\) point which both shares a row with another point and shares a column with another point.</p>

<p><strong>Extension</strong>: Show that \(2n - 2\) points aren’t sufficient to get an (axis-aligned) right-angle triangle. Is it sufficient to get any right-angle triangle (not necessarily axis-aligned)?</p>

<p><strong>Solution (Extension)</strong>: If the grid is \([1,n] \times [1,n]\), consider the \(2n - 2\) points \((1,1), (1,2), \dots, (1,n-2), (1,n-1), (2,n), (3,n), \dots, (n-1,n), (n,n)\). We see that no right-angle triangle can be made (even non axis aligned).</p>]]></content><author><name>Siddhartha Srivastava</name></author><category term="puzzles" /><category term="solution" /><summary type="html"><![CDATA[Problem: Suppose you have an \(n \times n\) grid. Show that for any \(2n - 1\) points chosen on the grid, there exist \(3\) points that form a right-angle triangle. Solution: The standard solution here is to use the pigeon-hole principle. We note that the existence of an (axis-aligned) right-angle triangle is guaranteed if there exists a point such that there exists one point in the same row (i.e. with the same y-coordinate) and another point in the same column (i.e. with the same x-coordinate). This motivates us to try to find the number of points that share a row/column with another point. To find the minimum number of points that share a row/column with another point, we find the maximum number of points that don’t share a row/column with another point. This comes out to \(n - 1\) since we can isolate \(n-1\) points in \(n - 1\) row/columns (we can’t do \(n\) since we only have \(n\) rows and given we have \(&gt;n\) points, one row will have more than one point.) Therefore, the minimum number of points that share a row is \(n\). Likewise, the number of points that share a column is \(n\). Given that we have only \(2n - 1\) points, we see that there must be \(1\) point which both shares a row with another point and shares a column with another point.]]></summary></entry><entry><title type="html">What do I write about</title><link href="http://localhost:4000/personal/WritingABlog.html" rel="alternate" type="text/html" title="What do I write about" /><published>2022-02-01T00:00:00+05:30</published><updated>2022-02-01T00:00:00+05:30</updated><id>http://localhost:4000/personal/WritingABlog</id><content type="html" xml:base="http://localhost:4000/personal/WritingABlog.html"><![CDATA[<p>One of the skills that I’ve always felt I’ve been lacking is my ability to write long-form. The ability to eloquently portray my thoughts to someone reading what I’ve written is not something that I’ve been very good at. The primary reason why is a lack of practice. It’s been a long time since I’ve actually sat down and just written. The major roadblock that I do face whenever I sit down to write something is what do I write about. It’s effectively writer’s block even though I’ve not even started writing. Do I go overboard and analyze what people write about and try to understand the type of content that is of use to people so that anything I write here doesn’t devolve into having a readership of exactly 2 people (Hi!) regularly and one person who somehow stumbles upon my website, looks around at my website and realizes that it’s just random musing with no context whatsoever.</p>

<p>Every time I do decide that I’m going to write something, the question that ends up ruining my attempt at writing is why should I write publically. What utility does writing publically serve that is not served by maintaining a personal diary where I have the freedom to write anything. In the most pragmatic terms, I can write without the fear of someone looking negatively at my thoughts and using that to make decisions that influence me negatively. I don’t have to worry about how people will perceive my writing and judge me based on what I’ve written. On the other hand, if I want to grow in my ability in conveying thoughts, I need to learn how to write for others to read. The primary complaint that people have about my writing is the lack of context setting. I end up writing things assuming that the person reading is aware of the direction I intend on taking or has the broader context of why I’m choosing to emphasize certain facts. This results in essays that are effectively random sentences put in together with no good reason why I’ve stopped writing about one subject and moved on to the next. What’s worse is that there’s no context setting on why I’ve chosen to move on the discussing the next point from the previous point. I think one reason why this may be true is that this also explains why I am bad at reviewing things that I have already written. If I read something long after I first drafted it, the context is lost. The jumps and leaps in logic become more jarring. Worse, it hits me that this is what everyone else is reading. The essay goes from a coherent treatise proving a central point to a jumble of words that I have a tough time connecting.</p>

<p>Another reason why I think that writing publically will probably be better than writing privately is that there is a sense of laziness that comes from writing privately. When there’s no one else that is reading what I write, I can always just give up on writing properly. Both in terms of grammar and actual content. This is not ideal since the primary goal of writing for me is learning how to communicate and elaborating thoughts. When you’re writing for someone to read, you’re forced to expand or elucidate upon points once you’ve written them down. You can’t repeat the same points because you know that you won’t be adding value. But with writing privately, you can always just cheat and go down the same path and just repeat the same thought endlessly. There’s no incentive to write properly.</p>

<p>In conclusion, I guess I should start writing long-form. The few things that I may try playing around with are fleshing out thoughts I’ve had throughout the week or writing about interesting problems that I’ve seen or that I’ve solved.</p>]]></content><author><name>Siddhartha Srivastava</name></author><category term="personal" /><category term="personal" /><summary type="html"><![CDATA[One of the skills that I’ve always felt I’ve been lacking is my ability to write long-form. The ability to eloquently portray my thoughts to someone reading what I’ve written is not something that I’ve been very good at. The primary reason why is a lack of practice. It’s been a long time since I’ve actually sat down and just written. The major roadblock that I do face whenever I sit down to write something is what do I write about. It’s effectively writer’s block even though I’ve not even started writing. Do I go overboard and analyze what people write about and try to understand the type of content that is of use to people so that anything I write here doesn’t devolve into having a readership of exactly 2 people (Hi!) regularly and one person who somehow stumbles upon my website, looks around at my website and realizes that it’s just random musing with no context whatsoever. Every time I do decide that I’m going to write something, the question that ends up ruining my attempt at writing is why should I write publically. What utility does writing publically serve that is not served by maintaining a personal diary where I have the freedom to write anything. In the most pragmatic terms, I can write without the fear of someone looking negatively at my thoughts and using that to make decisions that influence me negatively. I don’t have to worry about how people will perceive my writing and judge me based on what I’ve written. On the other hand, if I want to grow in my ability in conveying thoughts, I need to learn how to write for others to read. The primary complaint that people have about my writing is the lack of context setting. I end up writing things assuming that the person reading is aware of the direction I intend on taking or has the broader context of why I’m choosing to emphasize certain facts. This results in essays that are effectively random sentences put in together with no good reason why I’ve stopped writing about one subject and moved on to the next. What’s worse is that there’s no context setting on why I’ve chosen to move on the discussing the next point from the previous point. I think one reason why this may be true is that this also explains why I am bad at reviewing things that I have already written. If I read something long after I first drafted it, the context is lost. The jumps and leaps in logic become more jarring. Worse, it hits me that this is what everyone else is reading. The essay goes from a coherent treatise proving a central point to a jumble of words that I have a tough time connecting. Another reason why I think that writing publically will probably be better than writing privately is that there is a sense of laziness that comes from writing privately. When there’s no one else that is reading what I write, I can always just give up on writing properly. Both in terms of grammar and actual content. This is not ideal since the primary goal of writing for me is learning how to communicate and elaborating thoughts. When you’re writing for someone to read, you’re forced to expand or elucidate upon points once you’ve written them down. You can’t repeat the same points because you know that you won’t be adding value. But with writing privately, you can always just cheat and go down the same path and just repeat the same thought endlessly. There’s no incentive to write properly. In conclusion, I guess I should start writing long-form. The few things that I may try playing around with are fleshing out thoughts I’ve had throughout the week or writing about interesting problems that I’ve seen or that I’ve solved.]]></summary></entry></feed>