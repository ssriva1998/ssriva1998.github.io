<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-12-02T10:30:19+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Rep(i,n)</title><subtitle>Really cool blog about ... something</subtitle><author><name>Siddhartha Srivastava</name></author><entry><title type="html">pilot</title><link href="http://localhost:4000/2018/10/16/pilot/" rel="alternate" type="text/html" title="pilot" /><published>2018-10-16T03:07:00+05:30</published><updated>2018-10-16T03:07:00+05:30</updated><id>http://localhost:4000/2018/10/16/pilot</id><content type="html" xml:base="http://localhost:4000/2018/10/16/pilot/">&lt;p&gt;So no one is probably going to be reading these, so I guess I’ll keep this as a diary of sorts on the problems that we solved.&lt;/p&gt;

&lt;p&gt;The contest we attempted was the 2017-18 ACM-ICPC NCPC. Most people in my friendlist solved around 7-8 questions, with 7 problems common and the 8th problem solved being different. In total, 9 unique problems were solved in contest.&lt;/p&gt;

&lt;h3 id=&quot;problem-j&quot;&gt;&lt;strong&gt;Problem J&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;If l is equal to r, print out “EVEN 2*l” otherwise, just print out “ODD 2*max(l,r)”. If both l and r are 0, then print out “Not a moose”.&lt;/p&gt;

&lt;p&gt;Time Complexity: O(1)&lt;/p&gt;

&lt;h3 id=&quot;problem-b&quot;&gt;&lt;strong&gt;Problem B&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The solution is to iterate over runners assuming they go first, then find the next three fastest runners. Then we just take the minimum over these combinations.&lt;/p&gt;

&lt;p&gt;Time Complexity: O(n*n*log(n))&lt;/p&gt;

&lt;h3 id=&quot;problem-k&quot;&gt;&lt;strong&gt;Problem K&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Here, we perform a binary search on the speed of the slowest boat. We always try to put the least strength of kayakers whenever possible.&lt;/p&gt;

&lt;p&gt;Time Complexity: O(log2(MAXC)*n*6)&lt;/p&gt;

&lt;p&gt;Note: If we change the number of kayakers in a kayak from 2 to k and type of kayakers from 3 to l, the answer should be O(log2(MAXC)*n*(k+l-1)C(k))&lt;/p&gt;

&lt;h3 id=&quot;problem-g&quot;&gt;&lt;strong&gt;Problem G&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;I solved it using a multisets corresponding to the number of problems solved and storing penalty involved. Then you just need the number of teams solving more problems than the first team, which you can easily store in an array counting the number of teams to solve i problems, plus the number of teams with a lower penalty, which can be found from the corresponding multiset.&lt;/p&gt;

&lt;p&gt;Time Complexity: O(m*log(n)), since each question solved by someone other than the 1st team takes log(n) to process when it is read, then once more when the 1st team also solves that many questions, thus giving O(m*log(n))&lt;/p&gt;

&lt;h3 id=&quot;problem-e&quot;&gt;&lt;strong&gt;Problem E&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Process nodes in decreasing depth. Basically, Once we’ve processed all nodes of depth d_i, we’ve reached all possible nodes with depth &amp;lt;= d_i and now must move upwards and explore nodes of &amp;gt; d_i.&lt;/p&gt;

&lt;p&gt;Time Complexity: O(h*w*log(h*w)). This is a slight modification of Djistkra’s.&lt;/p&gt;

&lt;h3 id=&quot;problem-d&quot;&gt;&lt;strong&gt;Problem D&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;This problem can be modelled as a graph (V,E) where two number have an edge between them if their binary representation has one digit flipped. Then, we just need to find the number which is at a maximum distance from all the given nodes, which we can find with a simple BFS.&lt;/p&gt;

&lt;p&gt;Time Complexity: Interestingly enough, this is O(k*2^k) and does not depend on k.&lt;/p&gt;

&lt;h3 id=&quot;problem-i&quot;&gt;&lt;strong&gt;Problem I&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;This problem simply asks if a cycle exists in the dependency graph, and if it does exist, find the elements of the shortest cycle. Simply running a BFS from each node will find the shortest cycle it is a part of.&lt;/p&gt;

&lt;p&gt;Time Complexity: O(n*(n+m)), because we run a BFS for each node.&lt;/p&gt;

&lt;h3 id=&quot;problem-c&quot;&gt;&lt;strong&gt;Problem C&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;So this problem seems hard initially, but you can prove that removal of each card only influences 6 cards around it. The case when there are two or more cards adjacent with the same angle is the only issue, but you can discard (hah pun) those cases when you realise their uniqueness due to that color was 0 anyways.&lt;/p&gt;

&lt;p&gt;Time Complexity: O(n*log(n)), for sorting.&lt;/p&gt;

&lt;h2 id=&quot;problem-a&quot;&gt;&lt;strong&gt;Problem A&lt;/strong&gt;&lt;/h2&gt;</content><author><name>Siddhartha Srivastava</name></author><summary type="html">So no one is probably going to be reading these, so I guess I’ll keep this as a diary of sorts on the problems that we solved. The contest we attempted was the 2017-18 ACM-ICPC NCPC. Most people in my friendlist solved around 7-8 questions, with 7 problems common and the 8th problem solved being different. In total, 9 unique problems were solved in contest. Problem J If l is equal to r, print out “EVEN 2*l” otherwise, just print out “ODD 2*max(l,r)”. If both l and r are 0, then print out “Not a moose”. Time Complexity: O(1) Problem B The solution is to iterate over runners assuming they go first, then find the next three fastest runners. Then we just take the minimum over these combinations. Time Complexity: O(n*n*log(n)) Problem K Here, we perform a binary search on the speed of the slowest boat. We always try to put the least strength of kayakers whenever possible. Time Complexity: O(log2(MAXC)*n*6) Note: If we change the number of kayakers in a kayak from 2 to k and type of kayakers from 3 to l, the answer should be O(log2(MAXC)*n*(k+l-1)C(k)) Problem G I solved it using a multisets corresponding to the number of problems solved and storing penalty involved. Then you just need the number of teams solving more problems than the first team, which you can easily store in an array counting the number of teams to solve i problems, plus the number of teams with a lower penalty, which can be found from the corresponding multiset. Time Complexity: O(m*log(n)), since each question solved by someone other than the 1st team takes log(n) to process when it is read, then once more when the 1st team also solves that many questions, thus giving O(m*log(n)) Problem E Process nodes in decreasing depth. Basically, Once we’ve processed all nodes of depth d_i, we’ve reached all possible nodes with depth &amp;lt;= d_i and now must move upwards and explore nodes of &amp;gt; d_i. Time Complexity: O(h*w*log(h*w)). This is a slight modification of Djistkra’s. Problem D This problem can be modelled as a graph (V,E) where two number have an edge between them if their binary representation has one digit flipped. Then, we just need to find the number which is at a maximum distance from all the given nodes, which we can find with a simple BFS. Time Complexity: Interestingly enough, this is O(k*2^k) and does not depend on k. Problem I This problem simply asks if a cycle exists in the dependency graph, and if it does exist, find the elements of the shortest cycle. Simply running a BFS from each node will find the shortest cycle it is a part of. Time Complexity: O(n*(n+m)), because we run a BFS for each node. Problem C So this problem seems hard initially, but you can prove that removal of each card only influences 6 cards around it. The case when there are two or more cards adjacent with the same angle is the only issue, but you can discard (hah pun) those cases when you realise their uniqueness due to that color was 0 anyways. Time Complexity: O(n*log(n)), for sorting. Problem A</summary></entry><entry><title type="html">Example Text</title><link href="http://localhost:4000/text/2017/02/18/example-text/" rel="alternate" type="text/html" title="Example Text" /><published>2017-02-18T05:07:00+05:30</published><updated>2017-02-18T05:07:00+05:30</updated><id>http://localhost:4000/text/2017/02/18/example-text</id><content type="html" xml:base="http://localhost:4000/text/2017/02/18/example-text/">&lt;p&gt;Lorem &lt;strong&gt;ipsum dolor&lt;/strong&gt; sit amet, consectetur adipiscing elit, &lt;code class=&quot;highlighter-rouge&quot;&gt;sed do eiusmod tempor&lt;/code&gt; incididunt ut &lt;em&gt;labore&lt;/em&gt; et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud &lt;strong&gt;&lt;em&gt;exercitation&lt;/em&gt;&lt;/strong&gt; ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute &lt;em&gt;irure dolor&lt;/em&gt; in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.&lt;/p&gt;

&lt;p&gt;The term was coined in 1964 by two &lt;a href=&quot;https://en.wikipedia.org/wiki/Australia&quot;&gt;Australian&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/CSIRO&quot;&gt;CSIRO&lt;/a&gt; researchers, Isabel Joy Bear and Richard G. Thomas, for an article in the journal &lt;a href=&quot;https://en.wikipedia.org/wiki/Nature_(journal)&quot;&gt;Nature&lt;/a&gt;. In the article, the authors describe how the smell derives from an oil exuded by certain &lt;a href=&quot;https://en.wikipedia.org/wiki/Plants&quot;&gt;plants&lt;/a&gt; during dry periods, whereupon it is &lt;a href=&quot;https://en.wikipedia.org/wiki/Absorption_(chemistry)&quot;&gt;absorbed&lt;/a&gt; by &lt;a href=&quot;https://en.wikipedia.org/wiki/Clay&quot;&gt;clay&lt;/a&gt;-based &lt;a href=&quot;https://en.wikipedia.org/wiki/Soil&quot;&gt;soils&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Rock_(geology)&quot;&gt;rocks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some scientists believe that humans appreciate the rain scent because ancestors may have relied on rainy weather for survival.&lt;/p&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;h4 id=&quot;unordered&quot;&gt;Unordered&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;lorem&lt;/li&gt;
  &lt;li&gt;ipsum&lt;/li&gt;
  &lt;li&gt;dolor&lt;/li&gt;
  &lt;li&gt;sit amet&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;ordered&quot;&gt;Ordered&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;lorem&lt;/li&gt;
  &lt;li&gt;ipsum&lt;/li&gt;
  &lt;li&gt;dolor&lt;/li&gt;
  &lt;li&gt;sit amet&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Siddhartha Srivastava</name></author><summary type="html">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. The term was coined in 1964 by two Australian CSIRO researchers, Isabel Joy Bear and Richard G. Thomas, for an article in the journal Nature. In the article, the authors describe how the smell derives from an oil exuded by certain plants during dry periods, whereupon it is absorbed by clay-based soils and rocks.</summary></entry><entry><title type="html">Example Objects</title><link href="http://localhost:4000/objects/2017/02/02/example-objects/" rel="alternate" type="text/html" title="Example Objects" /><published>2017-02-02T04:00:00+05:30</published><updated>2017-02-02T04:00:00+05:30</updated><id>http://localhost:4000/objects/2017/02/02/example-objects</id><content type="html" xml:base="http://localhost:4000/objects/2017/02/02/example-objects/">&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;asyncEnabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vAdmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Allocator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestAlloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Identity_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vAdmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asyncEnabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Dict&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dict_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;asyncEnabled&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int_OBJ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Admin_sendMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;quote&quot;&gt;Quote&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;They who can give up essential liberty to obtain a little temporary safety, deserve neither liberty nor safety.&lt;/p&gt;

  &lt;p&gt;&lt;em&gt;Benjamin Franklin&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;table&quot;&gt;Table&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;First Header&lt;/th&gt;
      &lt;th&gt;Second Header&lt;/th&gt;
      &lt;th&gt;Third Header&lt;/th&gt;
      &lt;th&gt;Fourth Header&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;First Entry&lt;/td&gt;
      &lt;td&gt;Second Entry&lt;/td&gt;
      &lt;td&gt;Third Entry&lt;/td&gt;
      &lt;td&gt;Fourth Entry&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Fifth Entry&lt;/td&gt;
      &lt;td&gt;Sixth Entry&lt;/td&gt;
      &lt;td&gt;Seventh Entry&lt;/td&gt;
      &lt;td&gt;Eight Entry&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ninth Entry&lt;/td&gt;
      &lt;td&gt;Tenth Entry&lt;/td&gt;
      &lt;td&gt;Eleventh Entry&lt;/td&gt;
      &lt;td&gt;Twelfth Entry&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;image&quot;&gt;Image&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/3/32/Photography_by_Victor_Albert_Grigas_%281919-2017%29_000172050002_%2837159721864%29.jpg/1039px-Photography_by_Victor_Albert_Grigas_%281919-2017%29_000172050002_%2837159721864%29.jpg&quot; alt=&quot;subtle swirly bokeh in the background&quot; /&gt;&lt;/p&gt;</content><author><name>Siddhartha Srivastava</name></author><summary type="html">Code static void asyncEnabled(Dict* args, void* vAdmin, String* txid, struct Allocator* requestAlloc) { struct Admin* admin = Identity_check((struct Admin*) vAdmin); int64_t enabled = admin-&amp;gt;asyncEnabled; Dict d = Dict_CONST(String_CONST(&quot;asyncEnabled&quot;), Int_OBJ(enabled), NULL); Admin_sendMessage(&amp;amp;d, txid, admin); }</summary></entry><entry><title type="html">Lorem ipsum dolor sit amet consectetur adipiscing elit</title><link href="http://localhost:4000/text/2017/01/18/example-text/" rel="alternate" type="text/html" title="Lorem ipsum dolor sit amet consectetur adipiscing elit" /><published>2017-01-18T05:07:00+05:30</published><updated>2017-01-18T05:07:00+05:30</updated><id>http://localhost:4000/text/2017/01/18/example-text</id><content type="html" xml:base="http://localhost:4000/text/2017/01/18/example-text/">&lt;p&gt;Sachi is amazing
Lorem &lt;strong&gt;ipsum dolor&lt;/strong&gt; sit amet, consectetur adipiscing elit, &lt;code class=&quot;highlighter-rouge&quot;&gt;sed do eiusmod tempor&lt;/code&gt; incididunt ut &lt;em&gt;labore&lt;/em&gt; et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud &lt;strong&gt;&lt;em&gt;exercitation&lt;/em&gt;&lt;/strong&gt; ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute &lt;em&gt;irure dolor&lt;/em&gt; in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.&lt;/p&gt;

&lt;p&gt;The term was coined in 1964 by two &lt;a href=&quot;https://en.wikipedia.org/wiki/Australia&quot;&gt;Australian&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/CSIRO&quot;&gt;CSIRO&lt;/a&gt; researchers, Isabel Joy Bear and Richard G. Thomas, for an article in the journal &lt;a href=&quot;https://en.wikipedia.org/wiki/Nature_(journal)&quot;&gt;Nature&lt;/a&gt;. In the article, the authors describe how the smell derives from an oil exuded by certain &lt;a href=&quot;https://en.wikipedia.org/wiki/Plants&quot;&gt;plants&lt;/a&gt; during dry periods, whereupon it is &lt;a href=&quot;https://en.wikipedia.org/wiki/Absorption_(chemistry)&quot;&gt;absorbed&lt;/a&gt; by &lt;a href=&quot;https://en.wikipedia.org/wiki/Clay&quot;&gt;clay&lt;/a&gt;-based &lt;a href=&quot;https://en.wikipedia.org/wiki/Soil&quot;&gt;soils&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Rock_(geology)&quot;&gt;rocks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some scientists believe that humans appreciate the rain scent because ancestors may have relied on rainy weather for survival.&lt;/p&gt;</content><author><name>Siddhartha Srivastava</name></author><summary type="html">Sachi is amazing Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. The term was coined in 1964 by two Australian CSIRO researchers, Isabel Joy Bear and Richard G. Thomas, for an article in the journal Nature. In the article, the authors describe how the smell derives from an oil exuded by certain plants during dry periods, whereupon it is absorbed by clay-based soils and rocks.</summary></entry><entry><title type="html">Pagination works</title><link href="http://localhost:4000/2017/01/01/pagination-works/" rel="alternate" type="text/html" title="Pagination works" /><published>2017-01-01T06:00:00+05:30</published><updated>2017-01-01T06:00:00+05:30</updated><id>http://localhost:4000/2017/01/01/pagination-works</id><content type="html" xml:base="http://localhost:4000/2017/01/01/pagination-works/">&lt;blockquote&gt;
  &lt;p&gt;Pagination is the process of dividing a document into discrete pages, either electronic pages or printed pages.&lt;/p&gt;

  &lt;p&gt;In reference to books produced without a computer, pagination can mean the consecutive page numbering to indicate the proper order of the pages, which was rarely found in documents pre-dating 1500, and only became common practice c. 1550, when it replaced foliation, which numbered only the front sides of folios.&lt;/p&gt;

  &lt;p&gt;- &lt;a href=&quot;https://en.wikipedia.org/wiki/Pagination&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Siddhartha Srivastava</name></author><summary type="html">Pagination is the process of dividing a document into discrete pages, either electronic pages or printed pages. In reference to books produced without a computer, pagination can mean the consecutive page numbering to indicate the proper order of the pages, which was rarely found in documents pre-dating 1500, and only became common practice c. 1550, when it replaced foliation, which numbered only the front sides of folios. - Wikipedia</summary></entry></feed>